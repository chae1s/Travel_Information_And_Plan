# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Spring Boot & Gradle CI/CD 

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

      # vue 먼저 빌드
    - name: Install dependencies And Build
      run: |
        cd frontend
        npm install
        npm run build

      # permission denied 방지를 위한 코드
    - name: Grant permissions to Docker
      run: |
        sudo chmod 666 /var/run/docker.sock

    - name: Build and run Docker container
      run: |
        docker build -t your-image-name .
        docker run -d your-image-name

    - name: Build RabbitMQ Docker Image
      run: |
        docker build -t my-rabbitmq -f Dockerfile.rabbitmq .

      # java 코드 빌드    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # DockerHub Build, Push
    - name: DockerHub Build And Push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }} .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}

      # EC2 인스턴스 접속 및 애플리케이션 실행
    - name: Application Run
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          # 레디스, 레빗엠큐 컨테이너 있으면 지우고 시작
          sudo docker stop my-redis || true
          sudo docker stop my-rabbitmq || true
          
          # 레디스 컨테이너 실행
          sudo docker run --name my-redis -d -p 6379:6379 redis:latest
          # 레빗엠큐 컨테이너 실행
          sudo docker run -d -p 15671:15671 -p 15672:15672 -p 61613:61613 --name my-rabbitmq rabbitmq:3-management
        
          sudo docker rm -f $(docker ps -qa)
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}
          sudo docker-compose up -d
          sudo docker image prune -f
        
